<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="566" onload="init(evt)" viewBox="0 0 1200 566" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="566" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="549.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="549.00"> </text><svg id="frames" x="10" width="1180" total_samples="8774"><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.02%)</title><rect x="0.0228%" y="453" width="0.0228%" height="15" fill="rgb(227,0,7)" fg:x="2" fg:w="2"/><text x="0.2728%" y="463.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.01%)</title><rect x="0.0342%" y="437" width="0.0114%" height="15" fill="rgb(217,0,24)" fg:x="3" fg:w="1"/><text x="0.2842%" y="447.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.01%)</title><rect x="0.0342%" y="421" width="0.0114%" height="15" fill="rgb(221,193,54)" fg:x="3" fg:w="1"/><text x="0.2842%" y="431.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.01%)</title><rect x="0.0342%" y="405" width="0.0114%" height="15" fill="rgb(248,212,6)" fg:x="3" fg:w="1"/><text x="0.2842%" y="415.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.01%)</title><rect x="0.0342%" y="389" width="0.0114%" height="15" fill="rgb(208,68,35)" fg:x="3" fg:w="1"/><text x="0.2842%" y="399.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.01%)</title><rect x="0.0342%" y="373" width="0.0114%" height="15" fill="rgb(232,128,0)" fg:x="3" fg:w="1"/><text x="0.2842%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="0.0342%" y="357" width="0.0114%" height="15" fill="rgb(207,160,47)" fg:x="3" fg:w="1"/><text x="0.2842%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="0.0342%" y="341" width="0.0114%" height="15" fill="rgb(228,23,34)" fg:x="3" fg:w="1"/><text x="0.2842%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="0.0342%" y="325" width="0.0114%" height="15" fill="rgb(218,30,26)" fg:x="3" fg:w="1"/><text x="0.2842%" y="335.50"></text></g><g><title>[ld-linux-x86-64.so.2] (6 samples, 0.07%)</title><rect x="0.0000%" y="469" width="0.0684%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="6"/><text x="0.2500%" y="479.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="0.0456%" y="453" width="0.0228%" height="15" fill="rgb(250,228,42)" fg:x="4" fg:w="2"/><text x="0.2956%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="0.0570%" y="437" width="0.0114%" height="15" fill="rgb(240,193,28)" fg:x="5" fg:w="1"/><text x="0.3070%" y="447.50"></text></g><g><title>[ld-linux-x86-64.so.2] (7 samples, 0.08%)</title><rect x="0.0000%" y="485" width="0.0798%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="7"/><text x="0.2500%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="0.0684%" y="469" width="0.0114%" height="15" fill="rgb(206,188,39)" fg:x="6" fg:w="1"/><text x="0.3184%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="0.0684%" y="453" width="0.0114%" height="15" fill="rgb(217,207,13)" fg:x="6" fg:w="1"/><text x="0.3184%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="0.0684%" y="437" width="0.0114%" height="15" fill="rgb(231,73,38)" fg:x="6" fg:w="1"/><text x="0.3184%" y="447.50"></text></g><g><title>[unknown] (20 samples, 0.23%)</title><rect x="0.1482%" y="453" width="0.2279%" height="15" fill="rgb(225,20,46)" fg:x="13" fg:w="20"/><text x="0.3982%" y="463.50"></text></g><g><title>[unknown] (16 samples, 0.18%)</title><rect x="0.1938%" y="437" width="0.1824%" height="15" fill="rgb(210,31,41)" fg:x="17" fg:w="16"/><text x="0.4438%" y="447.50"></text></g><g><title>[unknown] (14 samples, 0.16%)</title><rect x="0.2165%" y="421" width="0.1596%" height="15" fill="rgb(221,200,47)" fg:x="19" fg:w="14"/><text x="0.4665%" y="431.50"></text></g><g><title>[unknown] (6 samples, 0.07%)</title><rect x="0.3077%" y="405" width="0.0684%" height="15" fill="rgb(226,26,5)" fg:x="27" fg:w="6"/><text x="0.5577%" y="415.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="0.3533%" y="389" width="0.0228%" height="15" fill="rgb(249,33,26)" fg:x="31" fg:w="2"/><text x="0.6033%" y="399.50"></text></g><g><title>__ctype_init (2 samples, 0.02%)</title><rect x="0.3761%" y="453" width="0.0228%" height="15" fill="rgb(235,183,28)" fg:x="33" fg:w="2"/><text x="0.6261%" y="463.50"></text></g><g><title>__sigsetjmp (1 samples, 0.01%)</title><rect x="0.3989%" y="453" width="0.0114%" height="15" fill="rgb(221,5,38)" fg:x="35" fg:w="1"/><text x="0.6489%" y="463.50"></text></g><g><title>std::io::stdio::set_output_capture (1 samples, 0.01%)</title><rect x="0.4331%" y="389" width="0.0114%" height="15" fill="rgb(247,18,42)" fg:x="38" fg:w="1"/><text x="0.6831%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (1 samples, 0.01%)</title><rect x="0.4331%" y="373" width="0.0114%" height="15" fill="rgb(241,131,45)" fg:x="38" fg:w="1"/><text x="0.6831%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="0.4673%" y="293" width="0.0114%" height="15" fill="rgb(249,31,29)" fg:x="41" fg:w="1"/><text x="0.7173%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="0.4673%" y="277" width="0.0114%" height="15" fill="rgb(225,111,53)" fg:x="41" fg:w="1"/><text x="0.7173%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="0.4673%" y="261" width="0.0114%" height="15" fill="rgb(238,160,17)" fg:x="41" fg:w="1"/><text x="0.7173%" y="271.50"></text></g><g><title>malloc (5 samples, 0.06%)</title><rect x="0.4445%" y="357" width="0.0570%" height="15" fill="rgb(214,148,48)" fg:x="39" fg:w="5"/><text x="0.6945%" y="367.50"></text></g><g><title>[libc.so.6] (5 samples, 0.06%)</title><rect x="0.4445%" y="341" width="0.0570%" height="15" fill="rgb(232,36,49)" fg:x="39" fg:w="5"/><text x="0.6945%" y="351.50"></text></g><g><title>[libc.so.6] (5 samples, 0.06%)</title><rect x="0.4445%" y="325" width="0.0570%" height="15" fill="rgb(209,103,24)" fg:x="39" fg:w="5"/><text x="0.6945%" y="335.50"></text></g><g><title>[libc.so.6] (4 samples, 0.05%)</title><rect x="0.4559%" y="309" width="0.0456%" height="15" fill="rgb(229,88,8)" fg:x="40" fg:w="4"/><text x="0.7059%" y="319.50"></text></g><g><title>__mmap (2 samples, 0.02%)</title><rect x="0.4787%" y="293" width="0.0228%" height="15" fill="rgb(213,181,19)" fg:x="42" fg:w="2"/><text x="0.7287%" y="303.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="0.4787%" y="277" width="0.0228%" height="15" fill="rgb(254,191,54)" fg:x="42" fg:w="2"/><text x="0.7287%" y="287.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="0.4787%" y="261" width="0.0228%" height="15" fill="rgb(241,83,37)" fg:x="42" fg:w="2"/><text x="0.7287%" y="271.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="0.4787%" y="245" width="0.0228%" height="15" fill="rgb(233,36,39)" fg:x="42" fg:w="2"/><text x="0.7287%" y="255.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="0.4787%" y="229" width="0.0228%" height="15" fill="rgb(226,3,54)" fg:x="42" fg:w="2"/><text x="0.7287%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="0.4901%" y="213" width="0.0114%" height="15" fill="rgb(245,192,40)" fg:x="43" fg:w="1"/><text x="0.7401%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="0.4901%" y="197" width="0.0114%" height="15" fill="rgb(238,167,29)" fg:x="43" fg:w="1"/><text x="0.7401%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="0.4901%" y="181" width="0.0114%" height="15" fill="rgb(232,182,51)" fg:x="43" fg:w="1"/><text x="0.7401%" y="191.50"></text></g><g><title>pthread_attr_init (1 samples, 0.01%)</title><rect x="0.5015%" y="357" width="0.0114%" height="15" fill="rgb(231,60,39)" fg:x="44" fg:w="1"/><text x="0.7515%" y="367.50"></text></g><g><title>__getpagesize (1 samples, 0.01%)</title><rect x="0.5015%" y="341" width="0.0114%" height="15" fill="rgb(208,69,12)" fg:x="44" fg:w="1"/><text x="0.7515%" y="351.50"></text></g><g><title>pthread_getaffinity_np (1 samples, 0.01%)</title><rect x="0.5129%" y="357" width="0.0114%" height="15" fill="rgb(235,93,37)" fg:x="45" fg:w="1"/><text x="0.7629%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="0.5129%" y="341" width="0.0114%" height="15" fill="rgb(213,116,39)" fg:x="45" fg:w="1"/><text x="0.7629%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="0.5129%" y="325" width="0.0114%" height="15" fill="rgb(222,207,29)" fg:x="45" fg:w="1"/><text x="0.7629%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="0.5129%" y="309" width="0.0114%" height="15" fill="rgb(206,96,30)" fg:x="45" fg:w="1"/><text x="0.7629%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="0.5129%" y="293" width="0.0114%" height="15" fill="rgb(218,138,4)" fg:x="45" fg:w="1"/><text x="0.7629%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="0.5129%" y="277" width="0.0114%" height="15" fill="rgb(250,191,14)" fg:x="45" fg:w="1"/><text x="0.7629%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="0.5129%" y="261" width="0.0114%" height="15" fill="rgb(239,60,40)" fg:x="45" fg:w="1"/><text x="0.7629%" y="271.50"></text></g><g><title>std::sys::unix::thread::guard::current (8 samples, 0.09%)</title><rect x="0.4445%" y="389" width="0.0912%" height="15" fill="rgb(206,27,48)" fg:x="39" fg:w="8"/><text x="0.6945%" y="399.50"></text></g><g><title>pthread_getattr_np (8 samples, 0.09%)</title><rect x="0.4445%" y="373" width="0.0912%" height="15" fill="rgb(225,35,8)" fg:x="39" fg:w="8"/><text x="0.6945%" y="383.50"></text></g><g><title>realloc (1 samples, 0.01%)</title><rect x="0.5243%" y="357" width="0.0114%" height="15" fill="rgb(250,213,24)" fg:x="46" fg:w="1"/><text x="0.7743%" y="367.50"></text></g><g><title>rand::rng::Rng::gen_range (11 samples, 0.13%)</title><rect x="0.6838%" y="341" width="0.1254%" height="15" fill="rgb(247,123,22)" fg:x="60" fg:w="11"/><text x="0.9338%" y="351.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (8 samples, 0.09%)</title><rect x="0.7180%" y="325" width="0.0912%" height="15" fill="rgb(231,138,38)" fg:x="63" fg:w="8"/><text x="0.9680%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="0.7978%" y="309" width="0.0114%" height="15" fill="rgb(231,145,46)" fg:x="70" fg:w="1"/><text x="1.0478%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="0.7978%" y="293" width="0.0114%" height="15" fill="rgb(251,118,11)" fg:x="70" fg:w="1"/><text x="1.0478%" y="303.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (60 samples, 0.68%)</title><rect x="0.8092%" y="341" width="0.6838%" height="15" fill="rgb(217,147,25)" fg:x="71" fg:w="60"/><text x="1.0592%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="1.4817%" y="325" width="0.0114%" height="15" fill="rgb(247,81,37)" fg:x="130" fg:w="1"/><text x="1.7317%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="1.4817%" y="309" width="0.0114%" height="15" fill="rgb(209,12,38)" fg:x="130" fg:w="1"/><text x="1.7317%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="1.4817%" y="293" width="0.0114%" height="15" fill="rgb(227,1,9)" fg:x="130" fg:w="1"/><text x="1.7317%" y="303.50"></text></g><g><title>rand_chacha::guts::init_chacha (2 samples, 0.02%)</title><rect x="1.5158%" y="325" width="0.0228%" height="15" fill="rgb(248,47,43)" fg:x="133" fg:w="2"/><text x="1.7658%" y="335.50"></text></g><g><title>rand_core::SeedableRng::seed_from_u64 (5 samples, 0.06%)</title><rect x="1.4930%" y="341" width="0.0570%" height="15" fill="rgb(221,10,30)" fg:x="131" fg:w="5"/><text x="1.7430%" y="351.50"></text></g><g><title>rand_core::SeedableRng::seed_from_u64::pcg32 (1 samples, 0.01%)</title><rect x="1.5386%" y="325" width="0.0114%" height="15" fill="rgb(210,229,1)" fg:x="135" fg:w="1"/><text x="1.7886%" y="335.50"></text></g><g><title>rand_core::impls::fill_via_u32_chunks (1 samples, 0.01%)</title><rect x="1.5500%" y="341" width="0.0114%" height="15" fill="rgb(222,148,37)" fg:x="136" fg:w="1"/><text x="1.8000%" y="351.50"></text></g><g><title>[libc.so.6] (37 samples, 0.42%)</title><rect x="2.5302%" y="325" width="0.4217%" height="15" fill="rgb(234,67,33)" fg:x="222" fg:w="37"/><text x="2.7802%" y="335.50"></text></g><g><title>GFp_sha256_block_data_order (4 samples, 0.05%)</title><rect x="3.7269%" y="309" width="0.0456%" height="15" fill="rgb(247,98,35)" fg:x="327" fg:w="4"/><text x="3.9769%" y="319.50"></text></g><g><title>GFp_sha256_block_data_order_ssse3 (1,381 samples, 15.74%)</title><rect x="3.7725%" y="309" width="15.7397%" height="15" fill="rgb(247,138,52)" fg:x="331" fg:w="1381"/><text x="4.0225%" y="319.50">GFp_sha256_block_data_or..</text></g><g><title>[libc.so.6] (3 samples, 0.03%)</title><rect x="19.5122%" y="309" width="0.0342%" height="15" fill="rgb(213,79,30)" fg:x="1712" fg:w="3"/><text x="19.7622%" y="319.50"></text></g><g><title>ring::digest::BlockContext::finish (1,490 samples, 16.98%)</title><rect x="2.9519%" y="325" width="16.9820%" height="15" fill="rgb(246,177,23)" fg:x="259" fg:w="1490"/><text x="3.2019%" y="335.50">ring::digest::BlockContext..</text></g><g><title>ring::digest::sha256_format_output (34 samples, 0.39%)</title><rect x="19.5464%" y="309" width="0.3875%" height="15" fill="rgb(230,62,27)" fg:x="1715" fg:w="34"/><text x="19.7964%" y="319.50"></text></g><g><title>ring::digest::Context::update (35 samples, 0.40%)</title><rect x="19.9339%" y="325" width="0.3989%" height="15" fill="rgb(216,154,8)" fg:x="1749" fg:w="35"/><text x="20.1839%" y="335.50"></text></g><g><title>[libc.so.6] (13 samples, 0.15%)</title><rect x="20.1846%" y="309" width="0.1482%" height="15" fill="rgb(244,35,45)" fg:x="1771" fg:w="13"/><text x="20.4346%" y="319.50"></text></g><g><title>ring::digest::digest (1,654 samples, 18.85%)</title><rect x="1.5614%" y="341" width="18.8512%" height="15" fill="rgb(251,115,12)" fg:x="137" fg:w="1654"/><text x="1.8114%" y="351.50">ring::digest::digest</text></g><g><title>spin::once::Once&lt;T&gt;::call_once (7 samples, 0.08%)</title><rect x="20.3328%" y="325" width="0.0798%" height="15" fill="rgb(240,54,50)" fg:x="1784" fg:w="7"/><text x="20.5828%" y="335.50"></text></g><g><title>ring::hmac::Key::new (3 samples, 0.03%)</title><rect x="20.4126%" y="325" width="0.0342%" height="15" fill="rgb(233,84,52)" fg:x="1791" fg:w="3"/><text x="20.6626%" y="335.50"></text></g><g><title>GFp_sha512_block_data_order (3 samples, 0.03%)</title><rect x="20.4126%" y="309" width="0.0342%" height="15" fill="rgb(207,117,47)" fg:x="1791" fg:w="3"/><text x="20.6626%" y="319.50"></text></g><g><title>[libc.so.6] (57 samples, 0.65%)</title><rect x="21.9170%" y="309" width="0.6496%" height="15" fill="rgb(249,43,39)" fg:x="1923" fg:w="57"/><text x="22.1670%" y="319.50"></text></g><g><title>ring::digest::Context::update (41 samples, 0.47%)</title><rect x="22.5667%" y="309" width="0.4673%" height="15" fill="rgb(209,38,44)" fg:x="1980" fg:w="41"/><text x="22.8167%" y="319.50"></text></g><g><title>[libc.so.6] (13 samples, 0.15%)</title><rect x="22.8858%" y="293" width="0.1482%" height="15" fill="rgb(236,212,23)" fg:x="2008" fg:w="13"/><text x="23.1358%" y="303.50"></text></g><g><title>[libc.so.6] (99 samples, 1.13%)</title><rect x="24.7778%" y="293" width="1.1283%" height="15" fill="rgb(242,79,21)" fg:x="2174" fg:w="99"/><text x="25.0278%" y="303.50"></text></g><g><title>GFp_sha512_block_data_order (6,112 samples, 69.66%)</title><rect x="28.4591%" y="277" width="69.6604%" height="15" fill="rgb(211,96,35)" fg:x="2497" fg:w="6112"/><text x="28.7091%" y="287.50">GFp_sha512_block_data_order</text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="98.0853%" y="261" width="0.0342%" height="15" fill="rgb(253,215,40)" fg:x="8606" fg:w="3"/><text x="98.3353%" y="271.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="98.0853%" y="245" width="0.0342%" height="15" fill="rgb(211,81,21)" fg:x="8606" fg:w="3"/><text x="98.3353%" y="255.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="98.0853%" y="229" width="0.0342%" height="15" fill="rgb(208,190,38)" fg:x="8606" fg:w="3"/><text x="98.3353%" y="239.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="98.0853%" y="213" width="0.0342%" height="15" fill="rgb(235,213,38)" fg:x="8606" fg:w="3"/><text x="98.3353%" y="223.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="98.0853%" y="197" width="0.0342%" height="15" fill="rgb(237,122,38)" fg:x="8606" fg:w="3"/><text x="98.3353%" y="207.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="98.0853%" y="181" width="0.0342%" height="15" fill="rgb(244,218,35)" fg:x="8606" fg:w="3"/><text x="98.3353%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="98.1080%" y="165" width="0.0114%" height="15" fill="rgb(240,68,47)" fg:x="8608" fg:w="1"/><text x="98.3580%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="98.1080%" y="149" width="0.0114%" height="15" fill="rgb(210,16,53)" fg:x="8608" fg:w="1"/><text x="98.3580%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="98.1080%" y="133" width="0.0114%" height="15" fill="rgb(235,124,12)" fg:x="8608" fg:w="1"/><text x="98.3580%" y="143.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="98.1080%" y="117" width="0.0114%" height="15" fill="rgb(224,169,11)" fg:x="8608" fg:w="1"/><text x="98.3580%" y="127.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="98.1080%" y="101" width="0.0114%" height="15" fill="rgb(250,166,2)" fg:x="8608" fg:w="1"/><text x="98.3580%" y="111.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="98.1080%" y="85" width="0.0114%" height="15" fill="rgb(242,216,29)" fg:x="8608" fg:w="1"/><text x="98.3580%" y="95.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="98.1080%" y="69" width="0.0114%" height="15" fill="rgb(230,116,27)" fg:x="8608" fg:w="1"/><text x="98.3580%" y="79.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="98.1080%" y="53" width="0.0114%" height="15" fill="rgb(228,99,48)" fg:x="8608" fg:w="1"/><text x="98.3580%" y="63.50"></text></g><g><title>[libc.so.6] (26 samples, 0.30%)</title><rect x="98.1194%" y="277" width="0.2963%" height="15" fill="rgb(253,11,6)" fg:x="8609" fg:w="26"/><text x="98.3694%" y="287.50"></text></g><g><title>&lt;F as threadpool::FnBox&gt;::call_box (8,639 samples, 98.46%)</title><rect x="0.5585%" y="373" width="98.4614%" height="15" fill="rgb(247,143,39)" fg:x="49" fg:w="8639"/><text x="0.8085%" y="383.50">&lt;F as threadpool::FnBox&gt;::call_box</text></g><g><title>taskrunner::task::Task::execute (8,639 samples, 98.46%)</title><rect x="0.5585%" y="357" width="98.4614%" height="15" fill="rgb(236,97,10)" fg:x="49" fg:w="8639"/><text x="0.8085%" y="367.50">taskrunner::task::Task::execute</text></g><g><title>ring::pbkdf2::derive (6,897 samples, 78.61%)</title><rect x="20.4126%" y="341" width="78.6072%" height="15" fill="rgb(233,208,19)" fg:x="1791" fg:w="6897"/><text x="20.6626%" y="351.50">ring::pbkdf2::derive</text></g><g><title>ring::pbkdf2::derive_block (6,894 samples, 78.57%)</title><rect x="20.4468%" y="325" width="78.5731%" height="15" fill="rgb(216,164,2)" fg:x="1794" fg:w="6894"/><text x="20.6968%" y="335.50">ring::pbkdf2::derive_block</text></g><g><title>ring::hmac::Context::sign (6,667 samples, 75.99%)</title><rect x="23.0340%" y="309" width="75.9859%" height="15" fill="rgb(220,129,5)" fg:x="2021" fg:w="6667"/><text x="23.2840%" y="319.50">ring::hmac::Context::sign</text></g><g><title>ring::digest::BlockContext::finish (6,415 samples, 73.11%)</title><rect x="25.9061%" y="293" width="73.1137%" height="15" fill="rgb(242,17,10)" fg:x="2273" fg:w="6415"/><text x="26.1561%" y="303.50">ring::digest::BlockContext::finish</text></g><g><title>ring::digest::sha512_format_output (53 samples, 0.60%)</title><rect x="98.4158%" y="277" width="0.6041%" height="15" fill="rgb(242,107,0)" fg:x="8635" fg:w="53"/><text x="98.6658%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="99.0198%" y="373" width="0.0114%" height="15" fill="rgb(251,28,31)" fg:x="8688" fg:w="1"/><text x="99.2698%" y="383.50"></text></g><g><title>std::sync::mpmc::list::Channel&lt;T&gt;::recv (11 samples, 0.13%)</title><rect x="99.0312%" y="373" width="0.1254%" height="15" fill="rgb(233,223,10)" fg:x="8689" fg:w="11"/><text x="99.2812%" y="383.50"></text></g><g><title>&lt;std::sync::mpmc::zero::ZeroToken as core::default::Default&gt;::default (3 samples, 0.03%)</title><rect x="99.1224%" y="357" width="0.0342%" height="15" fill="rgb(215,21,27)" fg:x="8697" fg:w="3"/><text x="99.3724%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="99.1452%" y="341" width="0.0114%" height="15" fill="rgb(232,23,21)" fg:x="8699" fg:w="1"/><text x="99.3952%" y="351.50"></text></g><g><title>std::sys::unix::futex::futex_wait (4 samples, 0.05%)</title><rect x="99.1680%" y="357" width="0.0456%" height="15" fill="rgb(244,5,23)" fg:x="8701" fg:w="4"/><text x="99.4180%" y="367.50"></text></g><g><title>syscall (4 samples, 0.05%)</title><rect x="99.1680%" y="341" width="0.0456%" height="15" fill="rgb(226,81,46)" fg:x="8701" fg:w="4"/><text x="99.4180%" y="351.50"></text></g><g><title>[unknown] (4 samples, 0.05%)</title><rect x="99.1680%" y="325" width="0.0456%" height="15" fill="rgb(247,70,30)" fg:x="8701" fg:w="4"/><text x="99.4180%" y="335.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="99.1794%" y="309" width="0.0342%" height="15" fill="rgb(212,68,19)" fg:x="8702" fg:w="3"/><text x="99.4294%" y="319.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="99.1794%" y="293" width="0.0342%" height="15" fill="rgb(240,187,13)" fg:x="8702" fg:w="3"/><text x="99.4294%" y="303.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="99.1794%" y="277" width="0.0342%" height="15" fill="rgb(223,113,26)" fg:x="8702" fg:w="3"/><text x="99.4294%" y="287.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="99.1794%" y="261" width="0.0342%" height="15" fill="rgb(206,192,2)" fg:x="8702" fg:w="3"/><text x="99.4294%" y="271.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="99.1908%" y="245" width="0.0228%" height="15" fill="rgb(241,108,4)" fg:x="8703" fg:w="2"/><text x="99.4408%" y="255.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="99.1908%" y="229" width="0.0228%" height="15" fill="rgb(247,173,49)" fg:x="8703" fg:w="2"/><text x="99.4408%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="99.2022%" y="213" width="0.0114%" height="15" fill="rgb(224,114,35)" fg:x="8704" fg:w="1"/><text x="99.4522%" y="223.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock_contended (9 samples, 0.10%)</title><rect x="99.1566%" y="373" width="0.1026%" height="15" fill="rgb(245,159,27)" fg:x="8700" fg:w="9"/><text x="99.4066%" y="383.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::spin (4 samples, 0.05%)</title><rect x="99.2136%" y="357" width="0.0456%" height="15" fill="rgb(245,172,44)" fg:x="8705" fg:w="4"/><text x="99.4636%" y="367.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (1 samples, 0.01%)</title><rect x="99.2478%" y="341" width="0.0114%" height="15" fill="rgb(236,23,11)" fg:x="8708" fg:w="1"/><text x="99.4978%" y="351.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.01%)</title><rect x="99.2478%" y="325" width="0.0114%" height="15" fill="rgb(205,117,38)" fg:x="8708" fg:w="1"/><text x="99.4978%" y="335.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (8,672 samples, 98.84%)</title><rect x="0.5357%" y="389" width="98.8375%" height="15" fill="rgb(237,72,25)" fg:x="47" fg:w="8672"/><text x="0.7857%" y="399.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>syscall (10 samples, 0.11%)</title><rect x="99.2592%" y="373" width="0.1140%" height="15" fill="rgb(244,70,9)" fg:x="8709" fg:w="10"/><text x="99.5092%" y="383.50"></text></g><g><title>[unknown] (10 samples, 0.11%)</title><rect x="99.2592%" y="357" width="0.1140%" height="15" fill="rgb(217,125,39)" fg:x="8709" fg:w="10"/><text x="99.5092%" y="367.50"></text></g><g><title>[unknown] (10 samples, 0.11%)</title><rect x="99.2592%" y="341" width="0.1140%" height="15" fill="rgb(235,36,10)" fg:x="8709" fg:w="10"/><text x="99.5092%" y="351.50"></text></g><g><title>[unknown] (10 samples, 0.11%)</title><rect x="99.2592%" y="325" width="0.1140%" height="15" fill="rgb(251,123,47)" fg:x="8709" fg:w="10"/><text x="99.5092%" y="335.50"></text></g><g><title>[unknown] (9 samples, 0.10%)</title><rect x="99.2706%" y="309" width="0.1026%" height="15" fill="rgb(221,13,13)" fg:x="8710" fg:w="9"/><text x="99.5206%" y="319.50"></text></g><g><title>[unknown] (6 samples, 0.07%)</title><rect x="99.3048%" y="293" width="0.0684%" height="15" fill="rgb(238,131,9)" fg:x="8713" fg:w="6"/><text x="99.5548%" y="303.50"></text></g><g><title>[unknown] (4 samples, 0.05%)</title><rect x="99.3276%" y="277" width="0.0456%" height="15" fill="rgb(211,50,8)" fg:x="8715" fg:w="4"/><text x="99.5776%" y="287.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="99.3504%" y="261" width="0.0228%" height="15" fill="rgb(245,182,24)" fg:x="8717" fg:w="2"/><text x="99.6004%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="99.3618%" y="245" width="0.0114%" height="15" fill="rgb(242,14,37)" fg:x="8718" fg:w="1"/><text x="99.6118%" y="255.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (8,683 samples, 98.96%)</title><rect x="0.4331%" y="437" width="98.9628%" height="15" fill="rgb(246,228,12)" fg:x="38" fg:w="8683"/><text x="0.6831%" y="447.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (8,683 samples, 98.96%)</title><rect x="0.4331%" y="421" width="98.9628%" height="15" fill="rgb(213,55,15)" fg:x="38" fg:w="8683"/><text x="0.6831%" y="431.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (8,683 samples, 98.96%)</title><rect x="0.4331%" y="405" width="98.9628%" height="15" fill="rgb(209,9,3)" fg:x="38" fg:w="8683"/><text x="0.6831%" y="415.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::sys_common::thread_info::set (2 samples, 0.02%)</title><rect x="99.3731%" y="389" width="0.0228%" height="15" fill="rgb(230,59,30)" fg:x="8719" fg:w="2"/><text x="99.6231%" y="399.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (2 samples, 0.02%)</title><rect x="99.3731%" y="373" width="0.0228%" height="15" fill="rgb(209,121,21)" fg:x="8719" fg:w="2"/><text x="99.6231%" y="383.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2 samples, 0.02%)</title><rect x="99.3731%" y="357" width="0.0228%" height="15" fill="rgb(220,109,13)" fg:x="8719" fg:w="2"/><text x="99.6231%" y="367.50"></text></g><g><title>std::sys_common::thread_info::THREAD_INFO::__getit (2 samples, 0.02%)</title><rect x="99.3731%" y="341" width="0.0228%" height="15" fill="rgb(232,18,1)" fg:x="8719" fg:w="2"/><text x="99.6231%" y="351.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::register_dtor (2 samples, 0.02%)</title><rect x="99.3731%" y="325" width="0.0228%" height="15" fill="rgb(215,41,42)" fg:x="8719" fg:w="2"/><text x="99.6231%" y="335.50"></text></g><g><title>__cxa_thread_atexit_impl (2 samples, 0.02%)</title><rect x="99.3731%" y="309" width="0.0228%" height="15" fill="rgb(224,123,36)" fg:x="8719" fg:w="2"/><text x="99.6231%" y="319.50"></text></g><g><title>pthread_mutex_lock (1 samples, 0.01%)</title><rect x="99.3845%" y="293" width="0.0114%" height="15" fill="rgb(240,125,3)" fg:x="8720" fg:w="1"/><text x="99.6345%" y="303.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (2 samples, 0.02%)</title><rect x="99.3959%" y="405" width="0.0228%" height="15" fill="rgb(205,98,50)" fg:x="8721" fg:w="2"/><text x="99.6459%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_load (2 samples, 0.02%)</title><rect x="99.3959%" y="389" width="0.0228%" height="15" fill="rgb(205,185,37)" fg:x="8721" fg:w="2"/><text x="99.6459%" y="399.50"></text></g><g><title>sigaltstack (10 samples, 0.11%)</title><rect x="99.4187%" y="405" width="0.1140%" height="15" fill="rgb(238,207,15)" fg:x="8723" fg:w="10"/><text x="99.6687%" y="415.50"></text></g><g><title>[unknown] (10 samples, 0.11%)</title><rect x="99.4187%" y="389" width="0.1140%" height="15" fill="rgb(213,199,42)" fg:x="8723" fg:w="10"/><text x="99.6687%" y="399.50"></text></g><g><title>[unknown] (10 samples, 0.11%)</title><rect x="99.4187%" y="373" width="0.1140%" height="15" fill="rgb(235,201,11)" fg:x="8723" fg:w="10"/><text x="99.6687%" y="383.50"></text></g><g><title>[unknown] (10 samples, 0.11%)</title><rect x="99.4187%" y="357" width="0.1140%" height="15" fill="rgb(207,46,11)" fg:x="8723" fg:w="10"/><text x="99.6687%" y="367.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="99.4985%" y="341" width="0.0342%" height="15" fill="rgb(241,35,35)" fg:x="8730" fg:w="3"/><text x="99.7485%" y="351.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="99.5099%" y="325" width="0.0228%" height="15" fill="rgb(243,32,47)" fg:x="8731" fg:w="2"/><text x="99.7599%" y="335.50"></text></g><g><title>__mmap (7 samples, 0.08%)</title><rect x="99.5327%" y="373" width="0.0798%" height="15" fill="rgb(247,202,23)" fg:x="8733" fg:w="7"/><text x="99.7827%" y="383.50"></text></g><g><title>[unknown] (7 samples, 0.08%)</title><rect x="99.5327%" y="357" width="0.0798%" height="15" fill="rgb(219,102,11)" fg:x="8733" fg:w="7"/><text x="99.7827%" y="367.50"></text></g><g><title>[unknown] (7 samples, 0.08%)</title><rect x="99.5327%" y="341" width="0.0798%" height="15" fill="rgb(243,110,44)" fg:x="8733" fg:w="7"/><text x="99.7827%" y="351.50"></text></g><g><title>[unknown] (5 samples, 0.06%)</title><rect x="99.5555%" y="325" width="0.0570%" height="15" fill="rgb(222,74,54)" fg:x="8735" fg:w="5"/><text x="99.8055%" y="335.50"></text></g><g><title>[unknown] (4 samples, 0.05%)</title><rect x="99.5669%" y="309" width="0.0456%" height="15" fill="rgb(216,99,12)" fg:x="8736" fg:w="4"/><text x="99.8169%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="99.6011%" y="293" width="0.0114%" height="15" fill="rgb(226,22,26)" fg:x="8739" fg:w="1"/><text x="99.8511%" y="303.50"></text></g><g><title>__mprotect (1 samples, 0.01%)</title><rect x="99.6125%" y="373" width="0.0114%" height="15" fill="rgb(217,163,10)" fg:x="8740" fg:w="1"/><text x="99.8625%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="99.6125%" y="357" width="0.0114%" height="15" fill="rgb(213,25,53)" fg:x="8740" fg:w="1"/><text x="99.8625%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="99.6125%" y="341" width="0.0114%" height="15" fill="rgb(252,105,26)" fg:x="8740" fg:w="1"/><text x="99.8625%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="99.6125%" y="325" width="0.0114%" height="15" fill="rgb(220,39,43)" fg:x="8740" fg:w="1"/><text x="99.8625%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="99.6125%" y="309" width="0.0114%" height="15" fill="rgb(229,68,48)" fg:x="8740" fg:w="1"/><text x="99.8625%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="99.6125%" y="293" width="0.0114%" height="15" fill="rgb(252,8,32)" fg:x="8740" fg:w="1"/><text x="99.8625%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="99.6125%" y="277" width="0.0114%" height="15" fill="rgb(223,20,43)" fg:x="8740" fg:w="1"/><text x="99.8625%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="99.6125%" y="261" width="0.0114%" height="15" fill="rgb(229,81,49)" fg:x="8740" fg:w="1"/><text x="99.8625%" y="271.50"></text></g><g><title>[libc.so.6] (8,735 samples, 99.56%)</title><rect x="0.0798%" y="469" width="99.5555%" height="15" fill="rgb(236,28,36)" fg:x="7" fg:w="8735"/><text x="0.3298%" y="479.50">[libc.so.6]</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (8,706 samples, 99.22%)</title><rect x="0.4103%" y="453" width="99.2250%" height="15" fill="rgb(249,185,26)" fg:x="36" fg:w="8706"/><text x="0.6603%" y="463.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>std::sys::unix::stack_overflow::Handler::new (21 samples, 0.24%)</title><rect x="99.3959%" y="437" width="0.2393%" height="15" fill="rgb(249,174,33)" fg:x="8721" fg:w="21"/><text x="99.6459%" y="447.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::make_handler (21 samples, 0.24%)</title><rect x="99.3959%" y="421" width="0.2393%" height="15" fill="rgb(233,201,37)" fg:x="8721" fg:w="21"/><text x="99.6459%" y="431.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stack (9 samples, 0.10%)</title><rect x="99.5327%" y="405" width="0.1026%" height="15" fill="rgb(221,78,26)" fg:x="8733" fg:w="9"/><text x="99.7827%" y="415.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stackp (9 samples, 0.10%)</title><rect x="99.5327%" y="389" width="0.1026%" height="15" fill="rgb(250,127,30)" fg:x="8733" fg:w="9"/><text x="99.7827%" y="399.50"></text></g><g><title>std::sys::unix::os::page_size (1 samples, 0.01%)</title><rect x="99.6239%" y="373" width="0.0114%" height="15" fill="rgb(230,49,44)" fg:x="8741" fg:w="1"/><text x="99.8739%" y="383.50"></text></g><g><title>__sysconf (1 samples, 0.01%)</title><rect x="99.6239%" y="357" width="0.0114%" height="15" fill="rgb(229,67,23)" fg:x="8741" fg:w="1"/><text x="99.8739%" y="367.50"></text></g><g><title>[libc.so.6] (8,739 samples, 99.60%)</title><rect x="0.0798%" y="485" width="99.6011%" height="15" fill="rgb(249,83,47)" fg:x="7" fg:w="8739"/><text x="0.3298%" y="495.50">[libc.so.6]</text></g><g><title>[unknown] (4 samples, 0.05%)</title><rect x="99.6353%" y="469" width="0.0456%" height="15" fill="rgb(215,43,3)" fg:x="8742" fg:w="4"/><text x="99.8853%" y="479.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="99.8290%" y="469" width="0.0228%" height="15" fill="rgb(238,154,13)" fg:x="8759" fg:w="2"/><text x="100.0790%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="99.8404%" y="453" width="0.0114%" height="15" fill="rgb(219,56,2)" fg:x="8760" fg:w="1"/><text x="100.0904%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="99.8404%" y="437" width="0.0114%" height="15" fill="rgb(233,0,4)" fg:x="8760" fg:w="1"/><text x="100.0904%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="99.8404%" y="421" width="0.0114%" height="15" fill="rgb(235,30,7)" fg:x="8760" fg:w="1"/><text x="100.0904%" y="431.50"></text></g><g><title>[unknown] (16 samples, 0.18%)</title><rect x="99.6809%" y="485" width="0.1824%" height="15" fill="rgb(250,79,13)" fg:x="8746" fg:w="16"/><text x="99.9309%" y="495.50"></text></g><g><title>syscall (1 samples, 0.01%)</title><rect x="99.8518%" y="469" width="0.0114%" height="15" fill="rgb(211,146,34)" fg:x="8761" fg:w="1"/><text x="100.1018%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="99.8518%" y="453" width="0.0114%" height="15" fill="rgb(228,22,38)" fg:x="8761" fg:w="1"/><text x="100.1018%" y="463.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.01%)</title><rect x="99.8632%" y="229" width="0.0114%" height="15" fill="rgb(235,168,5)" fg:x="8762" fg:w="1"/><text x="100.1132%" y="239.50"></text></g><g><title>clock_gettime (1 samples, 0.01%)</title><rect x="99.8632%" y="213" width="0.0114%" height="15" fill="rgb(221,155,16)" fg:x="8762" fg:w="1"/><text x="100.1132%" y="223.50"></text></g><g><title>__vdso_clock_gettime (1 samples, 0.01%)</title><rect x="99.8632%" y="197" width="0.0114%" height="15" fill="rgb(215,215,53)" fg:x="8762" fg:w="1"/><text x="100.1132%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="99.8632%" y="181" width="0.0114%" height="15" fill="rgb(223,4,10)" fg:x="8762" fg:w="1"/><text x="100.1132%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="99.8632%" y="165" width="0.0114%" height="15" fill="rgb(234,103,6)" fg:x="8762" fg:w="1"/><text x="100.1132%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="99.8632%" y="149" width="0.0114%" height="15" fill="rgb(227,97,0)" fg:x="8762" fg:w="1"/><text x="100.1132%" y="159.50"></text></g><g><title>__rdl_alloc (1 samples, 0.01%)</title><rect x="99.8746%" y="165" width="0.0114%" height="15" fill="rgb(234,150,53)" fg:x="8763" fg:w="1"/><text x="100.1246%" y="175.50"></text></g><g><title>pthread_attr_init (1 samples, 0.01%)</title><rect x="99.8860%" y="149" width="0.0114%" height="15" fill="rgb(228,201,54)" fg:x="8764" fg:w="1"/><text x="100.1360%" y="159.50"></text></g><g><title>__getpagesize (1 samples, 0.01%)</title><rect x="99.8860%" y="133" width="0.0114%" height="15" fill="rgb(222,22,37)" fg:x="8764" fg:w="1"/><text x="100.1360%" y="143.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="99.8974%" y="133" width="0.0114%" height="15" fill="rgb(237,53,32)" fg:x="8765" fg:w="1"/><text x="100.1474%" y="143.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="99.8974%" y="117" width="0.0114%" height="15" fill="rgb(233,25,53)" fg:x="8765" fg:w="1"/><text x="100.1474%" y="127.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="99.8974%" y="101" width="0.0114%" height="15" fill="rgb(210,40,34)" fg:x="8765" fg:w="1"/><text x="100.1474%" y="111.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="99.8974%" y="85" width="0.0114%" height="15" fill="rgb(241,220,44)" fg:x="8765" fg:w="1"/><text x="100.1474%" y="95.50"></text></g><g><title>__mmap (2 samples, 0.02%)</title><rect x="99.9088%" y="133" width="0.0228%" height="15" fill="rgb(235,28,35)" fg:x="8766" fg:w="2"/><text x="100.1588%" y="143.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="99.9088%" y="117" width="0.0228%" height="15" fill="rgb(210,56,17)" fg:x="8766" fg:w="2"/><text x="100.1588%" y="127.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="99.9088%" y="101" width="0.0228%" height="15" fill="rgb(224,130,29)" fg:x="8766" fg:w="2"/><text x="100.1588%" y="111.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="99.9088%" y="85" width="0.0228%" height="15" fill="rgb(235,212,8)" fg:x="8766" fg:w="2"/><text x="100.1588%" y="95.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="99.9088%" y="69" width="0.0228%" height="15" fill="rgb(223,33,50)" fg:x="8766" fg:w="2"/><text x="100.1588%" y="79.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="99.9202%" y="53" width="0.0114%" height="15" fill="rgb(219,149,13)" fg:x="8767" fg:w="1"/><text x="100.1702%" y="63.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="99.9202%" y="37" width="0.0114%" height="15" fill="rgb(250,156,29)" fg:x="8767" fg:w="1"/><text x="100.1702%" y="47.50"></text></g><g><title>__mprotect (1 samples, 0.01%)</title><rect x="99.9316%" y="133" width="0.0114%" height="15" fill="rgb(216,193,19)" fg:x="8768" fg:w="1"/><text x="100.1816%" y="143.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="99.9316%" y="117" width="0.0114%" height="15" fill="rgb(216,135,14)" fg:x="8768" fg:w="1"/><text x="100.1816%" y="127.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="99.9316%" y="101" width="0.0114%" height="15" fill="rgb(241,47,5)" fg:x="8768" fg:w="1"/><text x="100.1816%" y="111.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="99.9316%" y="85" width="0.0114%" height="15" fill="rgb(233,42,35)" fg:x="8768" fg:w="1"/><text x="100.1816%" y="95.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="99.9316%" y="69" width="0.0114%" height="15" fill="rgb(231,13,6)" fg:x="8768" fg:w="1"/><text x="100.1816%" y="79.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="99.9316%" y="53" width="0.0114%" height="15" fill="rgb(207,181,40)" fg:x="8768" fg:w="1"/><text x="100.1816%" y="63.50"></text></g><g><title>_dl_allocate_tls (2 samples, 0.02%)</title><rect x="99.9430%" y="133" width="0.0228%" height="15" fill="rgb(254,173,49)" fg:x="8769" fg:w="2"/><text x="100.1930%" y="143.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.02%)</title><rect x="99.9430%" y="117" width="0.0228%" height="15" fill="rgb(221,1,38)" fg:x="8769" fg:w="2"/><text x="100.1930%" y="127.50"></text></g><g><title>__libc_calloc (1 samples, 0.01%)</title><rect x="99.9544%" y="101" width="0.0114%" height="15" fill="rgb(206,124,46)" fg:x="8770" fg:w="1"/><text x="100.2044%" y="111.50"></text></g><g><title>[libc.so.6] (1 samples, 0.01%)</title><rect x="99.9544%" y="85" width="0.0114%" height="15" fill="rgb(249,21,11)" fg:x="8770" fg:w="1"/><text x="100.2044%" y="95.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="99.9772%" y="117" width="0.0114%" height="15" fill="rgb(222,201,40)" fg:x="8772" fg:w="1"/><text x="100.2272%" y="127.50"></text></g><g><title>all (8,774 samples, 100%)</title><rect x="0.0000%" y="517" width="100.0000%" height="15" fill="rgb(235,61,29)" fg:x="0" fg:w="8774"/><text x="0.2500%" y="527.50"></text></g><g><title>taskrunner (8,774 samples, 100.00%)</title><rect x="0.0000%" y="501" width="100.0000%" height="15" fill="rgb(219,207,3)" fg:x="0" fg:w="8774"/><text x="0.2500%" y="511.50">taskrunner</text></g><g><title>_start (12 samples, 0.14%)</title><rect x="99.8632%" y="485" width="0.1368%" height="15" fill="rgb(222,56,46)" fg:x="8762" fg:w="12"/><text x="100.1132%" y="495.50"></text></g><g><title>__libc_start_main (12 samples, 0.14%)</title><rect x="99.8632%" y="469" width="0.1368%" height="15" fill="rgb(239,76,54)" fg:x="8762" fg:w="12"/><text x="100.1132%" y="479.50"></text></g><g><title>[libc.so.6] (12 samples, 0.14%)</title><rect x="99.8632%" y="453" width="0.1368%" height="15" fill="rgb(231,124,27)" fg:x="8762" fg:w="12"/><text x="100.1132%" y="463.50"></text></g><g><title>main (12 samples, 0.14%)</title><rect x="99.8632%" y="437" width="0.1368%" height="15" fill="rgb(249,195,6)" fg:x="8762" fg:w="12"/><text x="100.1132%" y="447.50"></text></g><g><title>std::rt::lang_start_internal (12 samples, 0.14%)</title><rect x="99.8632%" y="421" width="0.1368%" height="15" fill="rgb(237,174,47)" fg:x="8762" fg:w="12"/><text x="100.1132%" y="431.50"></text></g><g><title>std::panic::catch_unwind (12 samples, 0.14%)</title><rect x="99.8632%" y="405" width="0.1368%" height="15" fill="rgb(206,201,31)" fg:x="8762" fg:w="12"/><text x="100.1132%" y="415.50"></text></g><g><title>std::panicking::try (12 samples, 0.14%)</title><rect x="99.8632%" y="389" width="0.1368%" height="15" fill="rgb(231,57,52)" fg:x="8762" fg:w="12"/><text x="100.1132%" y="399.50"></text></g><g><title>std::panicking::try::do_call (12 samples, 0.14%)</title><rect x="99.8632%" y="373" width="0.1368%" height="15" fill="rgb(248,177,22)" fg:x="8762" fg:w="12"/><text x="100.1132%" y="383.50"></text></g><g><title>std::rt::lang_start_internal::{{closure}} (12 samples, 0.14%)</title><rect x="99.8632%" y="357" width="0.1368%" height="15" fill="rgb(215,211,37)" fg:x="8762" fg:w="12"/><text x="100.1132%" y="367.50"></text></g><g><title>std::panic::catch_unwind (12 samples, 0.14%)</title><rect x="99.8632%" y="341" width="0.1368%" height="15" fill="rgb(241,128,51)" fg:x="8762" fg:w="12"/><text x="100.1132%" y="351.50"></text></g><g><title>std::panicking::try (12 samples, 0.14%)</title><rect x="99.8632%" y="325" width="0.1368%" height="15" fill="rgb(227,165,31)" fg:x="8762" fg:w="12"/><text x="100.1132%" y="335.50"></text></g><g><title>std::panicking::try::do_call (12 samples, 0.14%)</title><rect x="99.8632%" y="309" width="0.1368%" height="15" fill="rgb(228,167,24)" fg:x="8762" fg:w="12"/><text x="100.1132%" y="319.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (12 samples, 0.14%)</title><rect x="99.8632%" y="293" width="0.1368%" height="15" fill="rgb(228,143,12)" fg:x="8762" fg:w="12"/><text x="100.1132%" y="303.50"></text></g><g><title>std::rt::lang_start::{{closure}} (12 samples, 0.14%)</title><rect x="99.8632%" y="277" width="0.1368%" height="15" fill="rgb(249,149,8)" fg:x="8762" fg:w="12"/><text x="100.1132%" y="287.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (12 samples, 0.14%)</title><rect x="99.8632%" y="261" width="0.1368%" height="15" fill="rgb(243,35,44)" fg:x="8762" fg:w="12"/><text x="100.1132%" y="271.50"></text></g><g><title>taskrunner::main (12 samples, 0.14%)</title><rect x="99.8632%" y="245" width="0.1368%" height="15" fill="rgb(246,89,9)" fg:x="8762" fg:w="12"/><text x="100.1132%" y="255.50"></text></g><g><title>threadpool::ThreadPool::new (11 samples, 0.13%)</title><rect x="99.8746%" y="229" width="0.1254%" height="15" fill="rgb(233,213,13)" fg:x="8763" fg:w="11"/><text x="100.1246%" y="239.50"></text></g><g><title>threadpool::Builder::build (11 samples, 0.13%)</title><rect x="99.8746%" y="213" width="0.1254%" height="15" fill="rgb(233,141,41)" fg:x="8763" fg:w="11"/><text x="100.1246%" y="223.50"></text></g><g><title>threadpool::spawn_in_pool (11 samples, 0.13%)</title><rect x="99.8746%" y="197" width="0.1254%" height="15" fill="rgb(239,167,4)" fg:x="8763" fg:w="11"/><text x="100.1246%" y="207.50"></text></g><g><title>std::thread::Builder::spawn (11 samples, 0.13%)</title><rect x="99.8746%" y="181" width="0.1254%" height="15" fill="rgb(209,217,16)" fg:x="8763" fg:w="11"/><text x="100.1246%" y="191.50"></text></g><g><title>std::sys::unix::thread::Thread::new (10 samples, 0.11%)</title><rect x="99.8860%" y="165" width="0.1140%" height="15" fill="rgb(219,88,35)" fg:x="8764" fg:w="10"/><text x="100.1360%" y="175.50"></text></g><g><title>pthread_create (9 samples, 0.10%)</title><rect x="99.8974%" y="149" width="0.1026%" height="15" fill="rgb(220,193,23)" fg:x="8765" fg:w="9"/><text x="100.1474%" y="159.50"></text></g><g><title>_dl_allocate_tls_init (3 samples, 0.03%)</title><rect x="99.9658%" y="133" width="0.0342%" height="15" fill="rgb(230,90,52)" fg:x="8771" fg:w="3"/><text x="100.2158%" y="143.50"></text></g><g><title>pthread_mutex_lock (1 samples, 0.01%)</title><rect x="99.9886%" y="117" width="0.0114%" height="15" fill="rgb(252,106,19)" fg:x="8773" fg:w="1"/><text x="100.2386%" y="127.50"></text></g></svg></svg>