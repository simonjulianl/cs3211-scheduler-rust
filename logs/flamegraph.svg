<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="486" onload="init(evt)" viewBox="0 0 1200 486" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="486" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="469.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="469.00"> </text><svg id="frames" x="10" width="1180" total_samples="120565"><g><title>[unknown] (23 samples, 0.02%)</title><rect x="0.0083%" y="373" width="0.0191%" height="15" fill="rgb(227,0,7)" fg:x="10" fg:w="23"/><text x="0.2583%" y="383.50"></text></g><g><title>[unknown] (21 samples, 0.02%)</title><rect x="0.0100%" y="357" width="0.0174%" height="15" fill="rgb(217,0,24)" fg:x="12" fg:w="21"/><text x="0.2600%" y="367.50"></text></g><g><title>[unknown] (19 samples, 0.02%)</title><rect x="0.0116%" y="341" width="0.0158%" height="15" fill="rgb(221,193,54)" fg:x="14" fg:w="19"/><text x="0.2616%" y="351.50"></text></g><g><title>[unknown] (15 samples, 0.01%)</title><rect x="0.0149%" y="325" width="0.0124%" height="15" fill="rgb(248,212,6)" fg:x="18" fg:w="15"/><text x="0.2649%" y="335.50"></text></g><g><title>std::sys::unix::thread::guard::current (20 samples, 0.02%)</title><rect x="0.0299%" y="309" width="0.0166%" height="15" fill="rgb(208,68,35)" fg:x="36" fg:w="20"/><text x="0.2799%" y="319.50"></text></g><g><title>pthread_getattr_np (19 samples, 0.02%)</title><rect x="0.0307%" y="293" width="0.0158%" height="15" fill="rgb(232,128,0)" fg:x="37" fg:w="19"/><text x="0.2807%" y="303.50"></text></g><g><title>malloc (18 samples, 0.01%)</title><rect x="0.0315%" y="277" width="0.0149%" height="15" fill="rgb(207,160,47)" fg:x="38" fg:w="18"/><text x="0.2815%" y="287.50"></text></g><g><title>[libc.so.6] (17 samples, 0.01%)</title><rect x="0.0323%" y="261" width="0.0141%" height="15" fill="rgb(228,23,34)" fg:x="39" fg:w="17"/><text x="0.2823%" y="271.50"></text></g><g><title>[libc.so.6] (14 samples, 0.01%)</title><rect x="0.0348%" y="245" width="0.0116%" height="15" fill="rgb(218,30,26)" fg:x="42" fg:w="14"/><text x="0.2848%" y="255.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (410 samples, 0.34%)</title><rect x="0.2289%" y="261" width="0.3401%" height="15" fill="rgb(220,122,19)" fg:x="276" fg:w="410"/><text x="0.4789%" y="271.50"></text></g><g><title>[libc.so.6] (431 samples, 0.36%)</title><rect x="1.6705%" y="245" width="0.3575%" height="15" fill="rgb(250,228,42)" fg:x="2014" fg:w="431"/><text x="1.9205%" y="255.50"></text></g><g><title>GFp_sha256_block_data_order (125 samples, 0.10%)</title><rect x="2.9718%" y="229" width="0.1037%" height="15" fill="rgb(240,193,28)" fg:x="3583" fg:w="125"/><text x="3.2218%" y="239.50"></text></g><g><title>GFp_sha256_block_data_order_ssse3 (20,131 samples, 16.70%)</title><rect x="3.0755%" y="229" width="16.6972%" height="15" fill="rgb(216,20,37)" fg:x="3708" fg:w="20131"/><text x="3.3255%" y="239.50">GFp_sha256_block_data_orde..</text></g><g><title>[unknown] (27 samples, 0.02%)</title><rect x="19.7503%" y="213" width="0.0224%" height="15" fill="rgb(206,188,39)" fg:x="23812" fg:w="27"/><text x="20.0003%" y="223.50"></text></g><g><title>[unknown] (24 samples, 0.02%)</title><rect x="19.7528%" y="197" width="0.0199%" height="15" fill="rgb(217,207,13)" fg:x="23815" fg:w="24"/><text x="20.0028%" y="207.50"></text></g><g><title>[unknown] (23 samples, 0.02%)</title><rect x="19.7537%" y="181" width="0.0191%" height="15" fill="rgb(231,73,38)" fg:x="23816" fg:w="23"/><text x="20.0037%" y="191.50"></text></g><g><title>[unknown] (23 samples, 0.02%)</title><rect x="19.7537%" y="165" width="0.0191%" height="15" fill="rgb(225,20,46)" fg:x="23816" fg:w="23"/><text x="20.0037%" y="175.50"></text></g><g><title>[unknown] (23 samples, 0.02%)</title><rect x="19.7537%" y="149" width="0.0191%" height="15" fill="rgb(210,31,41)" fg:x="23816" fg:w="23"/><text x="20.0037%" y="159.50"></text></g><g><title>[unknown] (22 samples, 0.02%)</title><rect x="19.7545%" y="133" width="0.0182%" height="15" fill="rgb(221,200,47)" fg:x="23817" fg:w="22"/><text x="20.0045%" y="143.50"></text></g><g><title>[libc.so.6] (97 samples, 0.08%)</title><rect x="19.7727%" y="229" width="0.0805%" height="15" fill="rgb(226,26,5)" fg:x="23839" fg:w="97"/><text x="20.0227%" y="239.50"></text></g><g><title>ring::digest::BlockContext::finish (21,861 samples, 18.13%)</title><rect x="2.0280%" y="245" width="18.1321%" height="15" fill="rgb(249,33,26)" fg:x="2445" fg:w="21861"/><text x="2.2780%" y="255.50">ring::digest::BlockContext::..</text></g><g><title>ring::digest::sha256_format_output (369 samples, 0.31%)</title><rect x="19.8540%" y="229" width="0.3061%" height="15" fill="rgb(235,183,28)" fg:x="23937" fg:w="369"/><text x="20.1040%" y="239.50"></text></g><g><title>ring::digest::Context::update (590 samples, 0.49%)</title><rect x="20.1601%" y="245" width="0.4894%" height="15" fill="rgb(221,5,38)" fg:x="24306" fg:w="590"/><text x="20.4101%" y="255.50"></text></g><g><title>[libc.so.6] (171 samples, 0.14%)</title><rect x="20.5076%" y="229" width="0.1418%" height="15" fill="rgb(247,18,42)" fg:x="24725" fg:w="171"/><text x="20.7576%" y="239.50"></text></g><g><title>ring::digest::digest (24,312 samples, 20.17%)</title><rect x="0.5731%" y="261" width="20.1651%" height="15" fill="rgb(241,131,45)" fg:x="691" fg:w="24312"/><text x="0.8231%" y="271.50">ring::digest::digest</text></g><g><title>spin::once::Once&lt;T&gt;::call_once (107 samples, 0.09%)</title><rect x="20.6494%" y="245" width="0.0887%" height="15" fill="rgb(249,31,29)" fg:x="24896" fg:w="107"/><text x="20.8994%" y="255.50"></text></g><g><title>[libc.so.6] (693 samples, 0.57%)</title><rect x="22.2552%" y="229" width="0.5748%" height="15" fill="rgb(225,111,53)" fg:x="26832" fg:w="693"/><text x="22.5052%" y="239.50"></text></g><g><title>ring::digest::Context::update (554 samples, 0.46%)</title><rect x="22.8325%" y="229" width="0.4595%" height="15" fill="rgb(238,160,17)" fg:x="27528" fg:w="554"/><text x="23.0825%" y="239.50"></text></g><g><title>[libc.so.6] (176 samples, 0.15%)</title><rect x="23.1460%" y="213" width="0.1460%" height="15" fill="rgb(214,148,48)" fg:x="27906" fg:w="176"/><text x="23.3960%" y="223.50"></text></g><g><title>[libc.so.6] (1,084 samples, 0.90%)</title><rect x="24.7228%" y="213" width="0.8991%" height="15" fill="rgb(232,36,49)" fg:x="29807" fg:w="1084"/><text x="24.9728%" y="223.50"></text></g><g><title>GFp_sha512_block_data_order (78,560 samples, 65.16%)</title><rect x="28.1077%" y="197" width="65.1599%" height="15" fill="rgb(209,103,24)" fg:x="33888" fg:w="78560"/><text x="28.3577%" y="207.50">GFp_sha512_block_data_order</text></g><g><title>[unknown] (105 samples, 0.09%)</title><rect x="93.1804%" y="181" width="0.0871%" height="15" fill="rgb(229,88,8)" fg:x="112343" fg:w="105"/><text x="93.4304%" y="191.50"></text></g><g><title>[unknown] (88 samples, 0.07%)</title><rect x="93.1945%" y="165" width="0.0730%" height="15" fill="rgb(213,181,19)" fg:x="112360" fg:w="88"/><text x="93.4445%" y="175.50"></text></g><g><title>[unknown] (88 samples, 0.07%)</title><rect x="93.1945%" y="149" width="0.0730%" height="15" fill="rgb(254,191,54)" fg:x="112360" fg:w="88"/><text x="93.4445%" y="159.50"></text></g><g><title>[unknown] (85 samples, 0.07%)</title><rect x="93.1970%" y="133" width="0.0705%" height="15" fill="rgb(241,83,37)" fg:x="112363" fg:w="85"/><text x="93.4470%" y="143.50"></text></g><g><title>[unknown] (84 samples, 0.07%)</title><rect x="93.1979%" y="117" width="0.0697%" height="15" fill="rgb(233,36,39)" fg:x="112364" fg:w="84"/><text x="93.4479%" y="127.50"></text></g><g><title>[unknown] (77 samples, 0.06%)</title><rect x="93.2037%" y="101" width="0.0639%" height="15" fill="rgb(226,3,54)" fg:x="112371" fg:w="77"/><text x="93.4537%" y="111.50"></text></g><g><title>[unknown] (32 samples, 0.03%)</title><rect x="93.2410%" y="85" width="0.0265%" height="15" fill="rgb(245,192,40)" fg:x="112416" fg:w="32"/><text x="93.4910%" y="95.50"></text></g><g><title>[unknown] (32 samples, 0.03%)</title><rect x="93.2410%" y="69" width="0.0265%" height="15" fill="rgb(238,167,29)" fg:x="112416" fg:w="32"/><text x="93.4910%" y="79.50"></text></g><g><title>[unknown] (25 samples, 0.02%)</title><rect x="93.2468%" y="53" width="0.0207%" height="15" fill="rgb(232,182,51)" fg:x="112423" fg:w="25"/><text x="93.4968%" y="63.50"></text></g><g><title>[unknown] (24 samples, 0.02%)</title><rect x="93.2476%" y="37" width="0.0199%" height="15" fill="rgb(231,60,39)" fg:x="112424" fg:w="24"/><text x="93.4976%" y="47.50"></text></g><g><title>[libc.so.6] (252 samples, 0.21%)</title><rect x="93.2675%" y="197" width="0.2090%" height="15" fill="rgb(208,69,12)" fg:x="112448" fg:w="252"/><text x="93.5175%" y="207.50"></text></g><g><title>&lt;F as threadpool::FnBox&gt;::call_box (113,324 samples, 93.99%)</title><rect x="0.0506%" y="293" width="93.9941%" height="15" fill="rgb(235,93,37)" fg:x="61" fg:w="113324"/><text x="0.3006%" y="303.50">&lt;F as threadpool::FnBox&gt;::call_box</text></g><g><title>taskrunner::task::Task::execute (113,316 samples, 93.99%)</title><rect x="0.0572%" y="277" width="93.9875%" height="15" fill="rgb(213,116,39)" fg:x="69" fg:w="113316"/><text x="0.3072%" y="287.50">taskrunner::task::Task::execute</text></g><g><title>ring::pbkdf2::derive (88,382 samples, 73.31%)</title><rect x="20.7382%" y="261" width="73.3065%" height="15" fill="rgb(222,207,29)" fg:x="25003" fg:w="88382"/><text x="20.9882%" y="271.50">ring::pbkdf2::derive</text></g><g><title>ring::pbkdf2::derive_block (88,374 samples, 73.30%)</title><rect x="20.7448%" y="245" width="73.2999%" height="15" fill="rgb(206,96,30)" fg:x="25011" fg:w="88374"/><text x="20.9948%" y="255.50">ring::pbkdf2::derive_block</text></g><g><title>ring::hmac::Context::sign (85,303 samples, 70.75%)</title><rect x="23.2920%" y="229" width="70.7527%" height="15" fill="rgb(218,138,4)" fg:x="28082" fg:w="85303"/><text x="23.5420%" y="239.50">ring::hmac::Context::sign</text></g><g><title>ring::digest::BlockContext::finish (82,491 samples, 68.42%)</title><rect x="25.6244%" y="213" width="68.4204%" height="15" fill="rgb(250,191,14)" fg:x="30894" fg:w="82491"/><text x="25.8744%" y="223.50">ring::digest::BlockContext::finish</text></g><g><title>ring::digest::sha512_format_output (675 samples, 0.56%)</title><rect x="93.4848%" y="197" width="0.5599%" height="15" fill="rgb(239,60,40)" fg:x="112710" fg:w="675"/><text x="93.7348%" y="207.50"></text></g><g><title>std::sync::mpmc::context::Context::with::{{closure}} (13 samples, 0.01%)</title><rect x="94.0646%" y="277" width="0.0108%" height="15" fill="rgb(206,27,48)" fg:x="113409" fg:w="13"/><text x="94.3146%" y="287.50"></text></g><g><title>std::sync::mpmc::list::Channel&lt;T&gt;::recv (51 samples, 0.04%)</title><rect x="94.0455%" y="293" width="0.0423%" height="15" fill="rgb(225,35,8)" fg:x="113386" fg:w="51"/><text x="94.2955%" y="303.50"></text></g><g><title>std::thread::local::fast::Key&lt;T&gt;::try_initialize (13 samples, 0.01%)</title><rect x="94.0771%" y="277" width="0.0108%" height="15" fill="rgb(250,213,24)" fg:x="113424" fg:w="13"/><text x="94.3271%" y="287.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock_contended (17 samples, 0.01%)</title><rect x="94.0878%" y="293" width="0.0141%" height="15" fill="rgb(247,123,22)" fg:x="113437" fg:w="17"/><text x="94.3378%" y="303.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (113,414 samples, 94.07%)</title><rect x="0.0464%" y="309" width="94.0688%" height="15" fill="rgb(231,138,38)" fg:x="56" fg:w="113414"/><text x="0.2964%" y="319.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>syscall (15 samples, 0.01%)</title><rect x="94.1028%" y="293" width="0.0124%" height="15" fill="rgb(231,145,46)" fg:x="113455" fg:w="15"/><text x="94.3528%" y="303.50"></text></g><g><title>[unknown] (15 samples, 0.01%)</title><rect x="94.1028%" y="277" width="0.0124%" height="15" fill="rgb(251,118,11)" fg:x="113455" fg:w="15"/><text x="94.3528%" y="287.50"></text></g><g><title>[unknown] (13 samples, 0.01%)</title><rect x="94.1044%" y="261" width="0.0108%" height="15" fill="rgb(217,147,25)" fg:x="113457" fg:w="13"/><text x="94.3544%" y="271.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (113,437 samples, 94.09%)</title><rect x="0.0282%" y="357" width="94.0878%" height="15" fill="rgb(247,81,37)" fg:x="34" fg:w="113437"/><text x="0.2782%" y="367.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (113,437 samples, 94.09%)</title><rect x="0.0282%" y="341" width="94.0878%" height="15" fill="rgb(209,12,38)" fg:x="34" fg:w="113437"/><text x="0.2782%" y="351.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (113,437 samples, 94.09%)</title><rect x="0.0282%" y="325" width="94.0878%" height="15" fill="rgb(227,1,9)" fg:x="34" fg:w="113437"/><text x="0.2782%" y="335.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>[libc.so.6] (113,495 samples, 94.14%)</title><rect x="0.0058%" y="405" width="94.1359%" height="15" fill="rgb(248,47,43)" fg:x="7" fg:w="113495"/><text x="0.2558%" y="415.50">[libc.so.6]</text></g><g><title>[libc.so.6] (113,495 samples, 94.14%)</title><rect x="0.0058%" y="389" width="94.1359%" height="15" fill="rgb(221,10,30)" fg:x="7" fg:w="113495"/><text x="0.2558%" y="399.50">[libc.so.6]</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (113,469 samples, 94.11%)</title><rect x="0.0274%" y="373" width="94.1144%" height="15" fill="rgb(210,229,1)" fg:x="33" fg:w="113469"/><text x="0.2774%" y="383.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>std::sys::unix::stack_overflow::Handler::new (30 samples, 0.02%)</title><rect x="94.1169%" y="357" width="0.0249%" height="15" fill="rgb(222,148,37)" fg:x="113472" fg:w="30"/><text x="94.3669%" y="367.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::make_handler (30 samples, 0.02%)</title><rect x="94.1169%" y="341" width="0.0249%" height="15" fill="rgb(234,67,33)" fg:x="113472" fg:w="30"/><text x="94.3669%" y="351.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stack (19 samples, 0.02%)</title><rect x="94.1260%" y="325" width="0.0158%" height="15" fill="rgb(247,98,35)" fg:x="113483" fg:w="19"/><text x="94.3760%" y="335.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stackp (19 samples, 0.02%)</title><rect x="94.1260%" y="309" width="0.0158%" height="15" fill="rgb(247,138,52)" fg:x="113483" fg:w="19"/><text x="94.3760%" y="319.50"></text></g><g><title>[unknown] (16 samples, 0.01%)</title><rect x="94.1417%" y="405" width="0.0133%" height="15" fill="rgb(213,79,30)" fg:x="113502" fg:w="16"/><text x="94.3917%" y="415.50"></text></g><g><title>&lt;std::sync::mpmc::zero::ZeroToken as core::default::Default&gt;::default (558 samples, 0.46%)</title><rect x="99.3232%" y="133" width="0.4628%" height="15" fill="rgb(246,177,23)" fg:x="119749" fg:w="558"/><text x="99.5732%" y="143.50"></text></g><g><title>std::sync::mpmc::list::Channel&lt;T&gt;::try_recv (6,321 samples, 5.24%)</title><rect x="94.7298%" y="149" width="5.2428%" height="15" fill="rgb(230,62,27)" fg:x="114211" fg:w="6321"/><text x="94.9798%" y="159.50">std::s..</text></g><g><title>std::sync::mpmc::utils::Backoff::new (216 samples, 0.18%)</title><rect x="99.7935%" y="133" width="0.1792%" height="15" fill="rgb(216,154,8)" fg:x="120316" fg:w="216"/><text x="100.0435%" y="143.50"></text></g><g><title>_start (7,025 samples, 5.83%)</title><rect x="94.1550%" y="405" width="5.8267%" height="15" fill="rgb(244,35,45)" fg:x="113518" fg:w="7025"/><text x="94.4050%" y="415.50">_start</text></g><g><title>__libc_start_main (7,025 samples, 5.83%)</title><rect x="94.1550%" y="389" width="5.8267%" height="15" fill="rgb(251,115,12)" fg:x="113518" fg:w="7025"/><text x="94.4050%" y="399.50">__libc_..</text></g><g><title>[libc.so.6] (7,025 samples, 5.83%)</title><rect x="94.1550%" y="373" width="5.8267%" height="15" fill="rgb(240,54,50)" fg:x="113518" fg:w="7025"/><text x="94.4050%" y="383.50">[libc.s..</text></g><g><title>main (7,025 samples, 5.83%)</title><rect x="94.1550%" y="357" width="5.8267%" height="15" fill="rgb(233,84,52)" fg:x="113518" fg:w="7025"/><text x="94.4050%" y="367.50">main</text></g><g><title>std::rt::lang_start_internal (7,025 samples, 5.83%)</title><rect x="94.1550%" y="341" width="5.8267%" height="15" fill="rgb(207,117,47)" fg:x="113518" fg:w="7025"/><text x="94.4050%" y="351.50">std::rt..</text></g><g><title>std::panic::catch_unwind (7,025 samples, 5.83%)</title><rect x="94.1550%" y="325" width="5.8267%" height="15" fill="rgb(249,43,39)" fg:x="113518" fg:w="7025"/><text x="94.4050%" y="335.50">std::pa..</text></g><g><title>std::panicking::try (7,025 samples, 5.83%)</title><rect x="94.1550%" y="309" width="5.8267%" height="15" fill="rgb(209,38,44)" fg:x="113518" fg:w="7025"/><text x="94.4050%" y="319.50">std::pa..</text></g><g><title>std::panicking::try::do_call (7,025 samples, 5.83%)</title><rect x="94.1550%" y="293" width="5.8267%" height="15" fill="rgb(236,212,23)" fg:x="113518" fg:w="7025"/><text x="94.4050%" y="303.50">std::pa..</text></g><g><title>std::rt::lang_start_internal::{{closure}} (7,025 samples, 5.83%)</title><rect x="94.1550%" y="277" width="5.8267%" height="15" fill="rgb(242,79,21)" fg:x="113518" fg:w="7025"/><text x="94.4050%" y="287.50">std::rt..</text></g><g><title>std::panic::catch_unwind (7,025 samples, 5.83%)</title><rect x="94.1550%" y="261" width="5.8267%" height="15" fill="rgb(211,96,35)" fg:x="113518" fg:w="7025"/><text x="94.4050%" y="271.50">std::pa..</text></g><g><title>std::panicking::try (7,025 samples, 5.83%)</title><rect x="94.1550%" y="245" width="5.8267%" height="15" fill="rgb(253,215,40)" fg:x="113518" fg:w="7025"/><text x="94.4050%" y="255.50">std::pa..</text></g><g><title>std::panicking::try::do_call (7,025 samples, 5.83%)</title><rect x="94.1550%" y="229" width="5.8267%" height="15" fill="rgb(211,81,21)" fg:x="113518" fg:w="7025"/><text x="94.4050%" y="239.50">std::pa..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (7,025 samples, 5.83%)</title><rect x="94.1550%" y="213" width="5.8267%" height="15" fill="rgb(208,190,38)" fg:x="113518" fg:w="7025"/><text x="94.4050%" y="223.50">core::o..</text></g><g><title>std::rt::lang_start::{{closure}} (7,025 samples, 5.83%)</title><rect x="94.1550%" y="197" width="5.8267%" height="15" fill="rgb(235,213,38)" fg:x="113518" fg:w="7025"/><text x="94.4050%" y="207.50">std::rt..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (7,025 samples, 5.83%)</title><rect x="94.1550%" y="181" width="5.8267%" height="15" fill="rgb(237,122,38)" fg:x="113518" fg:w="7025"/><text x="94.4050%" y="191.50">std::sy..</text></g><g><title>taskrunner::main (7,025 samples, 5.83%)</title><rect x="94.1550%" y="165" width="5.8267%" height="15" fill="rgb(244,218,35)" fg:x="113518" fg:w="7025"/><text x="94.4050%" y="175.50">taskrun..</text></g><g><title>all (120,565 samples, 100%)</title><rect x="0.0000%" y="437" width="100.0000%" height="15" fill="rgb(240,68,47)" fg:x="0" fg:w="120565"/><text x="0.2500%" y="447.50"></text></g><g><title>taskrunner (120,565 samples, 100.00%)</title><rect x="0.0000%" y="421" width="100.0000%" height="15" fill="rgb(210,16,53)" fg:x="0" fg:w="120565"/><text x="0.2500%" y="431.50">taskrunner</text></g><g><title>taskrunner::main (22 samples, 0.02%)</title><rect x="99.9818%" y="405" width="0.0182%" height="15" fill="rgb(235,124,12)" fg:x="120543" fg:w="22"/><text x="100.2318%" y="415.50"></text></g><g><title>std::sync::mpmc::list::Channel&lt;T&gt;::try_recv (22 samples, 0.02%)</title><rect x="99.9818%" y="389" width="0.0182%" height="15" fill="rgb(224,169,11)" fg:x="120543" fg:w="22"/><text x="100.2318%" y="399.50"></text></g></svg></svg>